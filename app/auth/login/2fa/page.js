
'use client'
import styles from '@/assets/styles/auth-screens.module.css'
import PrimaryBtn from '@/components/Btn/Primary'
import OtpInput from 'react-otp-input'
import Input from '@/components/Dashboard/Input'
// import ResendOTP from '@/components/Verify/ResendOTP'
import { useNotify } from '@/utils/hooks'
import BackBtn from '@/components/Btn/Back'
import { useEffect, useState } from 'react'
import { useSearchParams } from 'next/navigation'
import { useRouter } from 'next/navigation'
import { authenticate } from '@/services/restService'
import { getTuEfAyToken, saveCredentials, saveToken } from '@/services/localService'

const LoginTuEfAy = () => {
	// console.log(getTuEfAyRef)
	// eslint-disable-next-line no-unused-vars
	const { push, back } = useRouter()
	const [otp, setOtp] = useState('')
	const searchParams = useSearchParams();
	const [errorMsg, setErrorMsg] = useState('')
	const [ctaClicked, setCtaClicked] = useState(false)
	const [isLoading, setIsLoading] = useState(false)
	const [renderInput, setRenderInput] = useState(false)

	const notify = useNotify()

	const handleVerificationSubmit = async (e) => {
		e.preventDefault()
		setCtaClicked(true)
		if (otp?.length !== 6) {
			return
		}
		setIsLoading(true)
		try {
			const payload = {
				code: otp,
				token: getTuEfAyToken()
			}
			const response = await authenticate.validate2faOtp(payload)
			const { data, token } = response.data
			saveCredentials(data)
			directUser(data)
			saveToken(token)
			notify("success", `You're logged in as ${payload.email}`)
		} catch (_err) {
			const { message, msg } = _err.response?.data || _err
			notify('error', message || msg)
			if (
				msg.toLowerCase().includes('otp') ||
				msg.toLowerCase().includes('code')
			) {
				setErrorMsg(msg)
			}
		} finally {
			setIsLoading(false)
		}
	}

	const directUser = ({ userType, isActive, regStage, kycStatus }) => {
		const businessLevels = ["", "address", "personal", "verify"];
		const individualLevels = ["", "business", "address", "verify"];
		if (!isActive && Number(userType) == 2) {
			push(`/auth/signup/business/${businessLevels[regStage]}`);
		} else if (!isActive && Number(userType) == 1) {
			push(`/auth/signup/individual/${individualLevels[regStage]}`);
		} else if (kycStatus.toLowerCase() === "pending") {
			if (Number(userType) == 2) {
				push("/kyc/corporate/business");
			} else {
				push("/kyc/individual/identity");
			}
		} else if (kycStatus === "inReview") {
			push("/kyc/status");
		} else if (kycStatus.toLowerCase() === "rejected") {
			push("/kyc/status");
		} else if (!searchParams.get("fallBackUrl")) {
			push("/dashboard");
		} else {
			push(searchParams.get("fallBackUrl"));
		}
	};

	useEffect(() => {
		setRenderInput(true)
		setErrorMsg('')
	}, [])

	useEffect(() => {
		setErrorMsg('')
	}, [otp])

	return (
		<div className={`${styles.auth} ${styles.no_pd_top}`}>
			<div className={styles.inner}>
				<div className={styles.center}>
					<BackBtn onClick={() => back()} />
					<h1 className="title">Let Us Verify You</h1>
					<h4 className="sub-title">
          Enter the 6-digit verification code generated by your authenticator app
					</h4>
					<form className={styles.form}
						onSubmit={handleVerificationSubmit}>
						<div className={styles.inner}>
							<Input
								error={(ctaClicked && otp?.length !== 6) || errorMsg}
								errorMsg={otp?.length !== 6 ? 'Valid OTP needed' : errorMsg}
								msgPositionCenter={true}
							>
								<div className={styles.otp_input}>
									{
										renderInput ?
											<OtpInput
												value={otp}
												onChange={setOtp}
												numInputs={6}
												shouldAutoFocus={true}
												inputType="number"
												inputMode={null}
												renderSeparator={<span />}
												renderInput={(props) => <input {...props} />}
											/>
											: <></>
									}
								</div>
							</Input>
						</div>
						<div className={styles.action_ctn}>
							{/* <ResendOTP
								email={''}
								clearOtp={()=>setOtp('')}
							/> */}
							<PrimaryBtn
								text="Login"
								loading={isLoading}
							/>
						</div>
					</form>
				</div>
			</div>
		</div>
	)
}

export default LoginTuEfAy
